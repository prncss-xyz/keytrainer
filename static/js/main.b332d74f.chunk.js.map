{"version":3,"sources":["components/list.ts","components/constants.ts","App.tsx","theme.ts","index.tsx"],"names":["clone","rfdc","drawTarget","state","seed","headGoodCount","targets","length","value","head","key","p","Math","pow","index","weight","errorRatio","lastCalledIndex","undefined","total","Object","values","charStatsMatrix","reduce","charStats","pick","entries","key0","Error","drawWeightedTarget","updateMean","newVal","mean","halfLife","newTarget","target","init","stateOut","count","push","slice","position","wantsNewTarget","newCharacter","backstoreCharacters","shift","sinceNewHeadCount","firstTime","completed","reducer","action","type","timeStamp","lastCorrect","correct","succRatio","lastPressTime","delay","delayMean","charSuccessHalfLife","registerCharacterPress","characters","process","REACT_APP_CHARACTERS","Pads","amount","res","i","css","width","InfoZone","theme","useTheme","cpm","display","justifyContent","fontSize","color","colors","muted","textAlign","fontWeight","good","text","round","statsHalfLife","LettersZone","mainTarget","flexDirection","alignItems","paddingTop","borderBottomStyle","borderWidth","paddingBottom","borderColor","map","focus","error","new","mutedNew","CSSTransition","classNames","timeout","split","character","in","transform","opacity","transition","App","state0","charactersBefore","random","useReducer","dispatch","useEffect","press","useList","sendKey","keyDownHandler","event","window","addEventListener","removeEventListener","styles","html","height","body","margin","fontFamily","padding","backgroundColor","background","backgroundImage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b332d74f.chunk.js","sourcesContent":["import { useReducer, useEffect } from 'react';\n\nimport rfdc from 'rfdc';\n\n// see source for definitions\nimport {\n  ratioThreshold,\n  maxDelay,\n  errBias,\n  charactersBefore,\n  maxChartersDisplayed,\n  unrepeatHalfLife,\n  statsHalfLife,\n  charSuccessHalfLife,\n  headGoodThreshold,\n} from './constants';\n\nconst clone = rfdc();\n\nexport type Immutable<T> = {\n  readonly [K in keyof T]: Immutable<T[K]>;\n};\n\ninterface CharStats {\n  errorRatio: number;\n  lastCalledIndex: number | undefined;\n}\n\ninterface PreTarget {\n  value: string;\n  firstTime: boolean;\n}\ntype Target = {\n  index: number;\n} & PreTarget;\n\nexport interface State {\n  completed: boolean; // standards have been met with last character\n  targets: Target[]; // character instances to be typed\n  position: number; // index within targets of character expected to be pressed\n  correct: boolean; // true if last press event was successful\n  succRatio: number; // weighted number of success, any character\n  headGoodCount: number; // number of success with lastly added character\n  sinceNewHeadCount: number; // number of success since lastly added character\n  backstoreCharacters: string[]; // characters that are not active yet, in order\n  lastPressTime?: number; // time of the last press event\n  delayMean?: number; // weighted number of registered events, will equal goodCumul + badCumul\n  head: string; // lastly added character\n  charStatsMatrix: { [character: string]: CharStats };\n  count: number;\n  wantsNewTarget: boolean;\n}\n\n// draw a character with a flat distribution\nfunction drawFlatTarget(state: Immutable<State>, seed: number): string {\n  let pick = seed * (Object.keys(state.charStatsMatrix).length - 1);\n  let key;\n  for (const key0 of Object.keys(state.charStatsMatrix)) {\n    key = key0;\n    if (key === state.targets[state.targets.length - 1]?.value) continue;\n    pick -= 1;\n    if (pick <= 0) return key;\n  }\n  if (!key) throw new Error('Expected non void selection.');\n  return key;\n}\n\nfunction drawWeightedTarget(state: Immutable<State>, seed: number): string {\n  const p = Math.pow(2, -1 / unrepeatHalfLife);\n  const index = state.targets[state.targets.length - 1]?.index + 1 || 0;\n  const weight = ({ errorRatio, lastCalledIndex }: CharStats) => {\n    if (lastCalledIndex === undefined) return errorRatio;\n    return errorRatio * (1 - Math.pow(p, index - lastCalledIndex - 1));\n  };\n  let total = Object.values(state.charStatsMatrix).reduce(\n    (total, charStats) => total + weight(charStats),\n    0,\n  );\n  let pick = seed * total;\n  let key;\n  for (const [key0, charStats] of Object.entries(state.charStatsMatrix)) {\n    key = key0;\n    pick -= weight(charStats);\n    if (pick <= 0) return key;\n  }\n  if (!key) throw new Error('charStatsMatrix should not be empty.');\n  return key;\n}\n\nfunction drawTarget(state: Immutable<State>, seed: number): string {\n  if (\n    state.headGoodCount < headGoodThreshold &&\n    state.targets[state.targets.length - 1]?.value !== state.head &&\n    seed > 0.8\n  )\n    return state.head;\n  // seed /= 0.8;\n  // if (Math.random() > 0.95)\n  // return drawFlatTarget(state, seed / 0.95);\n  return drawWeightedTarget(state, seed / 0.95);\n}\n\nconst updateMean = (\n  newVal: number,\n  mean: number | undefined,\n  halfLife: number,\n) =>\n  mean === undefined\n    ? newVal\n    : Math.pow(2, -1 / halfLife) * (mean - newVal) + newVal;\n\nconst press = (key: string, timeStamp: number) =>\n  ({ type: 'PRESS', key, timeStamp } as const);\n\nconst newRandomTarget = (seed: number) =>\n  ({ type: 'NEW_RANDOM_TARGET', seed } as const);\n// export const newChar = (key: string) => ({ type: 'NEW_CHAR', key } as const);\n\ntype Action = ReturnType<typeof press> | ReturnType<typeof newRandomTarget>;\n\n// adds a character instance to the typing flow\nfunction newTarget(\n  state: Immutable<State>,\n  target: PreTarget,\n  init = false,\n): State {\n  const stateOut = clone(state) as State;\n  // const index = stateOut.targets[stateOut.targets.length - 1]?.index + 1 || 0;\n  ++stateOut.count;\n  stateOut.targets.push({ ...target, index: stateOut.count });\n  stateOut.charStatsMatrix[target.value].lastCalledIndex = stateOut.count;\n  if (stateOut.targets.length > maxChartersDisplayed) {\n    stateOut.targets = stateOut.targets.slice(1);\n  } else {\n    if (!init) ++stateOut.position;\n  }\n  stateOut.wantsNewTarget = false;\n  return stateOut;\n}\n\n// adds a character type to active set\nfunction newCharacter(state: Immutable<State>, init = false): State {\n  const stateOut = clone(state) as State;\n  stateOut.head = state.backstoreCharacters[0];\n  if (!stateOut.head) {\n    stateOut.completed = true;\n    return stateOut;\n  }\n  stateOut.wantsNewTarget = false;\n  stateOut.backstoreCharacters.shift();\n  stateOut.sinceNewHeadCount = 0;\n  stateOut.headGoodCount = 0;\n  stateOut.charStatsMatrix[stateOut.head] = {\n    errorRatio: 1,\n    lastCalledIndex: undefined,\n  };\n  return newTarget(\n    stateOut,\n    {\n      value: stateOut.head,\n      firstTime: true,\n    },\n    init,\n  );\n}\n\nfunction registerCharacterPress(\n  state: State,\n  { key, timeStamp }: ReturnType<typeof press>,\n): State {\n  const target = state.targets[state.position];\n  if (!target) throw new Error('target must not be empty when key pressed');\n  const lastCorrect = state.correct;\n  state.correct = target.value === key;\n  if (lastCorrect) {\n    if (state.correct) {\n      state.succRatio = updateMean(1, state.succRatio, statsHalfLife);\n      state.charStatsMatrix[target.value].errorRatio = updateMean(\n        0,\n        state.charStatsMatrix[target.value].errorRatio,\n        charSuccessHalfLife,\n      );\n      if (state.lastPressTime) {\n        const delay = timeStamp - state.lastPressTime;\n        if (delay < maxDelay) {\n          state.delayMean = updateMean(delay, state.delayMean, statsHalfLife);\n        }\n      }\n      if (target.value === state.head) ++state.headGoodCount;\n    } else {\n      state.succRatio = updateMean(0, state.succRatio, statsHalfLife);\n      state.charStatsMatrix[target.value].errorRatio = updateMean(\n        1,\n        state.charStatsMatrix[target.value].errorRatio,\n        charSuccessHalfLife * errBias,\n      );\n    }\n  }\n\n  state.lastPressTime = timeStamp;\n  return state;\n}\n\nfunction reducer(state: Immutable<State>, action: Action): State {\n  switch (action.type) {\n    case 'PRESS': {\n      const stateOut = clone(state) as State;\n      registerCharacterPress(stateOut, action);\n      if (state.correct) {\n        if (\n          stateOut.correct &&\n          state.succRatio > ratioThreshold &&\n          stateOut.headGoodCount >= headGoodThreshold\n        ) {\n          return newCharacter(stateOut);\n        }\n      }\n      if (stateOut.correct) stateOut.wantsNewTarget = true;\n      return stateOut;\n    }\n    case 'NEW_RANDOM_TARGET': {\n      return newTarget(state, {\n        value: drawTarget(state, action.seed),\n        firstTime: false,\n      });\n    }\n  }\n}\n\nexport default function useList(characters: string) {\n  let state0: State = {\n    targets: [],\n    succRatio: 1,\n    delayMean: undefined,\n    position: 0,\n    correct: true,\n    sinceNewHeadCount: 0,\n    headGoodCount: 0,\n    backstoreCharacters: characters.split(''),\n    completed: false,\n    head: '',\n    charStatsMatrix: {},\n    count: 0,\n    wantsNewTarget: false,\n  };\n  state0 = newCharacter(state0, true);\n  while (state0.targets.length < charactersBefore + 1) {\n    state0 = newTarget(\n      state0,\n      {\n        value: drawTarget(state0, Math.random()),\n        firstTime: false,\n      },\n      true,\n    );\n  }\n\n  const [state, dispatch] = useReducer(reducer, state0);\n\n  // out of reducer because impure (randomness)\n  useEffect(() => {\n    if (state.wantsNewTarget) {\n      dispatch(newRandomTarget(Math.random()));\n    }\n  }, [dispatch, state.wantsNewTarget]);\n\n  const sendKey = (key: string, timeStamp: number) => {\n    if (key.length === 1) {\n      dispatch(press(key, timeStamp));\n    }\n  };\n\n  return [state, sendKey] as [State, typeof sendKey];\n}\n","// display constants\nexport const charactersBefore = 3;\nexport const maxChartersDisplayed = 2 * charactersBefore + 1;\n\n// algorithmic constants\n\n// delay (ms) above which press event is discarded\nexport const maxDelay = 10000;\n\n// success rate expected before introducing a new letter\nexport const ratioThreshold = 0.98;\n\n// number of success necessary to compensate an error, assuming there is\n// no deprecation\nexport const errBias = 3;\n\nexport const unrepeatHalfLife = 2;\nexport const statsHalfLife = 10;\nexport const charSuccessHalfLife = 4;\n\n// number of successful press of the lastly introduced letter expected before\n// introducing a new letter\nexport const headGoodThreshold = 4;\n","/** @jsxImportSource @emotion/react */\n\nimport useList, { State } from './components/list';\nimport { ratioThreshold, statsHalfLife } from './components/constants';\nimport { useTheme, Global } from '@emotion/react';\nimport { useEffect } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nconst characters = process.env.REACT_APP_CHARACTERS || 'asdfghjkl;qwertyuiopzxcvbnm'\n\nfunction Pads({ amount }: { amount: number }) {\n  const res = [];\n  for (let i = 0; i < amount; ++i)\n    res.push(<div key={i} css={{ width: '50px' }}></div>);\n  return <>{res}</>;\n}\n\nfunction InfoZone({ state }: { state: State }) {\n  const theme = useTheme() as any;\n\n  // characters per minute\n  const cpm = state.delayMean && 60000 / state.delayMean;\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        justifyContent: 'flex-end',\n      }}\n    >\n      <table\n        css={{\n          fontSize: '16px',\n          color: theme.colors.muted,\n        }}\n      >\n        <tr>\n          <td css={{ textAlign: 'right' }}>accuracy</td>\n          <td\n            css={{\n              fontWeight: 'normal',\n              width: '30px',\n              color:\n                state.succRatio > ratioThreshold\n                  ? theme.colors.good\n                  : theme.colors.text,\n              textAlign: 'center',\n            }}\n          >\n            {Math.round(state.succRatio * 100)}\n          </td>\n          <td css={{ textAlign: 'left' }}>%</td>\n        </tr>\n        <tr>\n          <td css={{ textAlign: 'right' }}>speed</td>\n          <td css={{ color: theme.colors.text, textAlign: 'center' }}>\n            {state.targets[state.position].index > statsHalfLife / 2 && cpm\n              ? Math.round(cpm)\n              : '\\u2013'}\n          </td>\n          <td css={{ textAlign: 'left' }}>char / min</td>\n        </tr>\n      </table>\n    </div>\n  );\n}\n\nfunction LettersZone({ state }: { state: State }) {\n  const theme = useTheme() as any;\n  const mainTarget = state.targets[state.position];\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        paddingTop: '200px',\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          borderBottomStyle: 'solid',\n          borderWidth: '1px',\n          paddingBottom: '10px',\n          borderColor: theme.colors.muted,\n        }}\n      >\n        <Pads amount={7 - state.targets.length} />\n        {state.targets.map(target => {\n          let color = undefined;\n          if (target.index === mainTarget?.index) {\n            color = theme.colors.focus;\n            if (!state.correct) color = theme.colors.error;\n          }\n          if (target.firstTime) color = theme.colors.new;\n          if (target.index < mainTarget?.index) {\n            color = theme.colors.muted;\n            if (target.firstTime) color = theme.colors.mutedNew;\n          }\n          return (\n            <CSSTransition\n              key={target.index}\n              classNames='character'\n              timeout={0}\n            >\n              <div\n                css={{\n                  color,\n                  width: '40px',\n                  textAlign: 'center',\n                  fontSize: '50px',\n                }}\n              >\n                {target.value}\n              </div>\n            </CSSTransition>\n          );\n        })}\n      </div>\n      <div\n        css={{\n          display: 'flex',\n          paddingTop: '10px',\n          fontSize: '20px',\n        }}\n      >\n        {characters.split('').map(character => (\n          <CSSTransition\n            in={character in state.charStatsMatrix}\n            timeout={300}\n            key={character}\n            classNames='node'\n          >\n            <div\n              css={{\n                color: theme.colors.muted,\n                '& div': {\n                  color:\n                    character in state.charStatsMatrix\n                      ? theme.colors.good\n                      : theme.colors.muted,\n                },\n                '&.node-enter': {\n                  '& div': {\n                    transform: 'scale(5)',\n                    opacity: 0,\n                    color: theme.colors.new,\n                  },\n                },\n                '&.node-enter-active': {\n                  transition: 'all 300ms ease-in',\n                  '& div': {\n                    transform: 'scale(1)',\n                    opacity: 1,\n                    color: theme.colors.good,\n                    transition: 'all 300ms ease-in',\n                  },\n                },\n              }}\n            >\n              <div css={{ position: 'absolute' }}>{character}</div>\n              {character}\n            </div>\n          </CSSTransition>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default function App() {\n  const theme = useTheme() as any;\n\n  const [state, sendKey] = useList(characters);\n\n  useEffect(() => {\n    const keyDownHandler = (event: KeyboardEvent) => {\n      const { key, timeStamp } = event;\n      sendKey(key, timeStamp);\n    };\n    window.addEventListener('keydown', keyDownHandler);\n    return () => {\n      window.removeEventListener('keydown', keyDownHandler);\n    };\n  }, [sendKey]);\n\n  return (\n    <>\n      <Global\n        styles={{\n          html: { height: '100%' },\n          '#root': { height: '100%' },\n          body: {\n            margin: '20px',\n            fontFamily: 'Cantarell',\n            padding: '10px',\n            backgroundColor: theme.colors.background,\n            backgroundImage:\n              \"url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='28' height='49' viewBox='0 0 28 49'%3E%3Cg fill-rule='evenodd'%3E%3Cg id='hexagons' fill='%239C92AC' fill-opacity='0.2' fill-rule='nonzero'%3E%3Cpath d='M13.99 9.25l13 7.5v15l-13 7.5L1 31.75v-15l12.99-7.5zM3 17.9v12.7l10.99 6.34 11-6.35V17.9l-11-6.34L3 17.9zM0 15l12.98-7.5V0h-2v6.35L0 12.69v2.3zm0 18.5L12.98 41v8h-2v-6.85L0 35.81v-2.3zM15 0v7.5L27.99 15H28v-2.31h-.01L17 6.35V0h-2zm0 49v-8l12.99-7.5H28v2.31h-.01L17 42.15V49h-2z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\\\")\",\n          },\n        }}\n      />\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'space-around',\n        }}\n      >\n        <InfoZone state={state} />\n        <LettersZone state={state} />\n      </div>\n    </>\n  );\n}\n","const theme = {\n  colors: {\n    background: 'hsl(0, 0%, 94%)', //'#F0F0F0',\n    muted: 'hsl(212, 14%, 57%)', // '#8391A1',\n    text: 'hsl(0, 0%, 0%)', //'#000000',\n    error: 'hsl(352, 100%, 40%)', // '#CD001A',\n    focus: 'hsl(202, 100%, 42%)', // '#008AD8',\n    new: 'hsl(46, 100%, 48%)', // '#F6BE00',\n    mutedNew: 'hsl(46, 50%, 70%)',\n    good: 'hsl(129, 100%, 30%)', // '#009A17',\n  },\n};\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ThemeProvider } from '@emotion/react';\nimport theme from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
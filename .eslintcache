[{"/home/prncss/Personal/Projects/keytrainer/src/App.tsx":"1","/home/prncss/Personal/Projects/keytrainer/src/components/list.ts":"2","/home/prncss/Personal/Projects/keytrainer/src/components/constants.ts":"3","/home/prncss/Personal/Projects/keytrainer/src/index.tsx":"4","/home/prncss/Personal/Projects/keytrainer/src/theme.ts":"5"},{"size":7428,"mtime":1612546531289,"results":"6","hashOfConfig":"7"},{"size":7896,"mtime":1612489051522,"results":"8","hashOfConfig":"7"},{"size":318,"mtime":1612489293412,"results":"9","hashOfConfig":"7"},{"size":652,"mtime":1612488231151,"results":"10","hashOfConfig":"7"},{"size":418,"mtime":1612546713801,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"13ar1gw",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/prncss/Personal/Projects/keytrainer/src/App.tsx",["24"],"/** @jsxImportSource @emotion/react */\n\nimport useList from './components/list';\nimport { ratioThreshold } from './components/constants';\nimport { useTheme, Global } from '@emotion/react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\nconst characters = 'etisuranovpdzlbjkmxhywf';\n\nfunction Pads({ amount }: { amount: number }) {\n  const res = [];\n  for (let i = 0; i < amount; ++i)\n    res.push(<div key={i} css={{ width: '50px' }}></div>);\n  return <>{res}</>;\n}\n\nfunction TypeZone() {\n  const theme = useTheme() as any;\n\n  const [state] = useList(characters);\n\n  const errorRatio = state.cumulGood / (state.cumulGood + state.cumulBad) || 1;\n  const mainTarget = state.targets[state.position];\n\n  // characters per minute\n  const cpm = (60000 * state.delay0) / state.delay1;\n\n  return (\n    <div\n      css={{\n        // fontFamily: 'Rubik',\n        fontFamily: 'Cantarell',\n        height: '100%',\n        padding: '10px',\n        backgroundColor: theme.colors.background,\n        backgroundImage:\n          \"url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='28' height='49' viewBox='0 0 28 49'%3E%3Cg fill-rule='evenodd'%3E%3Cg id='hexagons' fill='%239C92AC' fill-opacity='0.2' fill-rule='nonzero'%3E%3Cpath d='M13.99 9.25l13 7.5v15l-13 7.5L1 31.75v-15l12.99-7.5zM3 17.9v12.7l10.99 6.34 11-6.35V17.9l-11-6.34L3 17.9zM0 15l12.98-7.5V0h-2v6.35L0 12.69v2.3zm0 18.5L12.98 41v8h-2v-6.85L0 35.81v-2.3zM15 0v7.5L27.99 15H28v-2.31h-.01L17 6.35V0h-2zm0 49v-8l12.99-7.5H28v2.31h-.01L17 42.15V49h-2z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\\\")\",\n      }}\n    >\n      <Global styles={{ backgroundColor: 'red' }} /> {/*not working*/}\n      <div\n        css={{\n          textColor: theme.colors.text,\n        }}\n      >\n        <div\n          css={{\n            fontSize: '16px',\n            position: 'fixed',\n            right: '10px',\n            // display: 'flex',\n            // justifyContent: 'flex-end',\n            color: theme.colors.muted,\n            height: '100%',\n            textAlign: 'right',\n          }}\n        >\n          <table>\n            <tr>\n              <td css={{ textAlign: 'right' }}>accuracy</td>\n              <td\n                css={{\n                  fontWeight: 'normal',\n                  width: '30px',\n                  color:\n                    errorRatio > ratioThreshold\n                      ? theme.colors.good\n                      : theme.colors.text,\n                  textAlign: 'center',\n                }}\n              >\n                {Math.round(errorRatio * 100)}\n              </td>\n              <td css={{ textAlign: 'left' }}>%</td>\n            </tr>\n            <tr>\n              <td>speed</td>\n              <td css={{ color: theme.colors.text, textAlign: 'center' }}>\n                {Object.is(cpm, NaN) ? '\\u2013' : Math.round(cpm)}\n              </td>\n              <td css={{ textAlign: 'left' }}>char / min</td>\n            </tr>\n          </table>\n        </div>\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'flex-end',\n            height: '52vh',\n            // minHeight: '100%',\n          }}\n        >\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n            }}\n          >\n            <div // CSSTransition\n              css={{\n                display: 'flex',\n                justifyContent: 'flex-end',\n                // marginTop: '150px',\n                borderBottomStyle: 'solid',\n                borderWidth: '1px',\n                paddingBottom: '10px',\n                borderColor: theme.colors.muted,\n                '& .character-exit': {\n                  opacity: 1,\n                  transform: 'translate(0px, 0)',\n                },\n                '& .character-exit-active': {\n                  opacity: 0,\n                  transform: 'translate(-50px, 0)',\n                  transition: 'all 500ms ease-in',\n                },\n                '& .character-enter': {\n                  opacity: 0,\n                  transform: 'translate(50px, 0)',\n                },\n                '& .character-enter-active': {\n                  opacity: 1,\n                  transform: 'translate(0, 0)',\n                  transition: 'all 500ms ease-in',\n                },\n              }}\n            >\n              <Pads amount={7 - state.targets.length} />\n              {state.targets.map(target => {\n                let color = undefined;\n                if (target.index === mainTarget?.index) {\n                  color = theme.colors.focus;\n                  if (state.erroneous) color = theme.colors.error;\n                }\n                if (target.firstTime) color = theme.colors.new;\n                if (target.index < mainTarget?.index) {\n                  color = theme.colors.muted;\n                  if (target.firstTime) color = theme.colors.mutedNew;\n                }\n                return (\n                  <CSSTransition\n                    key={target.index}\n                    classNames='character'\n                    timeout={0}\n                  >\n                    <div\n                      css={{\n                        color,\n                        width: '40px',\n                        textAlign: 'center',\n                        fontSize: '50px',\n                      }}\n                    >\n                      {target.value}\n                    </div>\n                  </CSSTransition>\n                );\n              })}\n            </div>\n            <div\n              css={{\n                display: 'flex',\n                paddingTop: '10px',\n                fontSize: '20px',\n              }}\n            >\n              {characters.split('').map(character => (\n                <CSSTransition\n                  in={character in state.easeMatrix}\n                  timeout={300}\n                  key={character}\n                  classNames='node'\n                >\n                  <div\n                    css={{\n                      color: theme.colors.muted,\n                      '& div': {\n                        color:\n                          character in state.easeMatrix\n                            ? theme.colors.good\n                            : theme.colors.muted,\n                      },\n                      '&.node-enter': {\n                        '& div': {\n                          transform: 'scale(5)',\n                          opacity: 0,\n                          color: theme.colors.new,\n                        },\n                      },\n                      '&.node-enter-active': {\n                        transition: 'all 300ms ease-in',\n                        '& div': {\n                          transform: 'scale(1)',\n                          opacity: 1,\n                          color: theme.colors.good,\n                          transition: 'all 300ms ease-in',\n                        },\n                      },\n                    }}\n                  >\n                    <div css={{ position: 'absolute' }}>{character}</div>\n                    {character}\n                  </div>\n                </CSSTransition>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <div className='App'>\n      <TypeZone />\n    </div>\n  );\n}\n",["25","26"],"/home/prncss/Personal/Projects/keytrainer/src/components/list.ts",[],"/home/prncss/Personal/Projects/keytrainer/src/components/constants.ts",[],"/home/prncss/Personal/Projects/keytrainer/src/index.tsx",[],"/home/prncss/Personal/Projects/keytrainer/src/theme.ts",[],{"ruleId":"27","severity":1,"message":"28","line":6,"column":10,"nodeType":"29","messageId":"30","endLine":6,"endColumn":25},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},"@typescript-eslint/no-unused-vars","'TransitionGroup' is defined but never used.","Identifier","unusedVar","no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-global-assign","no-unsafe-negation"]